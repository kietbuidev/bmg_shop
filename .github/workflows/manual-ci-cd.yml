name: Manual CI/CD (Build → GHCR → Server pull)

on:
  workflow_dispatch:
    inputs:
      tag: { description: "Image tag (vd: v1.0.0 hoặc release-YYYYMMDD)", required: true }
      server_dir: { description: "Thư mục trên server", default: "/opt/projects/app-api", required: true }
      compose_file: { description: "Tên compose", default: "docker-compose.yml", required: true }
      services: { description: "Service cần restart (trống = tất cả)", default: "", required: false }
      migrate_tool: { description: "none|prisma|sequelize", default: "none", required: true }
      reload_nginx: { description: "Reload Nginx host? true/false", default: "false", required: true }

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Meta
        id: meta
        run: echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.event.inputs.tag }}
            ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.SHA }}
          build-args: |
            APP_VERSION=${{ github.event.inputs.tag }}
            GIT_SHA=${{ steps.meta.outputs.SHA }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,mode=max,ref=ghcr.io/${{ github.repository }}:buildcache

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: SSH & Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd "${{ github.event.inputs.server_dir }}"
            # set IMAGE_TAG vào .env để compose dùng tag mới
            if grep -q "^IMAGE_TAG=" .env; then
              sed -i "s|^IMAGE_TAG=.*$|IMAGE_TAG=${{ github.event.inputs.tag }}|" .env
            else
              echo "IMAGE_TAG=${{ github.event.inputs.tag }}" >> .env
            fi
            COMPOSE="docker compose -f ${{ github.event.inputs.compose_file }}"
            $COMPOSE pull
            if [ -z "${{ github.event.inputs.services }}" ]; then
              $COMPOSE up -d --remove-orphans
            else
              $COMPOSE up -d --remove-orphans ${{ github.event.inputs.services }}
            fi
            case "${{ github.event.inputs.migrate_tool }}" in
              prisma)    $COMPOSE exec -T app npx prisma migrate deploy || true ;;
              sequelize) $COMPOSE exec -T app npx sequelize db:migrate || true ;;
              *)         echo "Skip DB migrate" ;;
            esac
            if [ "${{ github.event.inputs.reload_nginx }}" = "true" ]; then
              if command -v sudo >/dev/null 2>&1; then
                sudo nginx -t && sudo systemctl reload nginx
              else
                nginx -t && nginx -s reload
              fi
            fi
            docker image prune -f || true